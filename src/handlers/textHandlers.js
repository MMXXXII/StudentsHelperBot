const { User, Group, GroupRequest, Subject, Task, SubjectRequest } = require("../database/models")
const { clearUserState, setUserState } = require("../utils/userState")

async function handleTextInput(bot, msg, userState) {
  const chatId = msg.chat.id
  const telegramId = msg.from.id
  const text = msg.text

  try {
    const user = await User.findOne({ where: { telegram_id: telegramId } })

    switch (userState.action) {
      case "adding_group":
        await handleAddingGroup(bot, chatId, user, text, userState)
        break
      case "adding_task":
        await handleAddingTask(bot, chatId, user, text, userState)
        break
      case "adding_subject":
        await handleAddingSubject(bot, chatId, user, text, userState)
        break
      default:
        clearUserState(telegramId)
        break
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTextInput:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    clearUserState(telegramId)
  }
}

async function handleAddingGroup(bot, chatId, user, text, userState) {
  if (userState.step === "name") {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
    const existingGroup = await Group.findOne({ where: { name: text } })
    const existingRequest = await GroupRequest.findOne({
      where: { group_name: text, status: "pending" },
    })

    if (existingGroup || existingRequest) {
      await bot.sendMessage(
        chatId,
        "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–µ—ë —É–∂–µ –ø–æ–¥–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
      )
      return
    }

    setUserState(user.telegram_id, {
      action: "adding_group",
      step: "description",
      data: { name: text },
    })

    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
  } else if (userState.step === "description") {
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    await GroupRequest.create({
      group_name: userState.data.name,
      description: text,
      user_id: user.id,
    })

    clearUserState(user.telegram_id)

    await bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${userState.data.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.`,
    )

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (process.env.ADMIN_TELEGRAM_ID) {
      await bot.sendMessage(
        process.env.ADMIN_TELEGRAM_ID,
        `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n` +
          `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${userState.data.name}\n` +
          `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${text}\n` +
          `üë§ –û—Ç: ${user.first_name} (@${user.username})\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.`,
      )
    }
  }
}

async function handleAddingTask(bot, chatId, user, text, userState) {
  const { step, data } = userState

  switch (step) {
    case "title":
      setUserState(user.telegram_id, {
        ...userState,
        step: "description",
        data: { ...data, title: text },
      })
      await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
      break

    case "description":
      setUserState(user.telegram_id, {
        ...userState,
        step: "deadline",
        data: { ...data, description: text },
      })
      await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024):")
      break

    case "deadline":
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/
      const match = text.match(dateRegex)

      if (!match) {
        await bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
      }

      const [, day, month, year] = match
      const deadline = new Date(year, month - 1, day)

      if (deadline < new Date()) {
        await bot.sendMessage(chatId, "–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      const task = await Task.create({
        title: data.title,
        description: data.description,
        subject_id: data.subjectId,
        group_id: data.groupId,
        deadline: deadline,
        created_by: user.id,
        for_group: data.forGroup || false,
      })

      clearUserState(user.telegram_id)

      await bot.sendMessage(
        chatId,
        `‚úÖ –ó–∞–¥–∞—á–∞ "${data.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
          `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n` +
          `üë• –î–ª—è: ${data.forGroup ? "–≤—Å–µ–π –≥—Ä—É–ø–ø—ã" : "—Ç–æ–ª—å–∫–æ –≤–∞—Å"}`,
      )
      break
  }
}

async function handleAddingSubject(bot, chatId, user, text, userState) {
  const { groupId, needsApproval } = userState.data

  if (needsApproval) {
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
    await SubjectRequest.create({
      subject_name: text,
      group_id: groupId,
      user_id: user.id,
    })

    await bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ "${text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.`)
  } else {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–∑—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫—É—Ä–∞—Ç–æ—Ä)
    await Subject.create({
      name: text,
      group_id: groupId,
      created_by: user.id,
      status: "active",
    })

    await bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${text}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`)
  }

  clearUserState(user.telegram_id)
}

module.exports = { handleTextInput }
