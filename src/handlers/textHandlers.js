const { User, Group, GroupRequest, Subject, Task, SubjectRequest, UserGroup } = require("../database/models")
const { clearUserState, setUserState } = require("../utils/userState")

async function handleTextInput(bot, msg, userState) {
  const chatId = msg.chat.id
  const telegramId = msg.from.id
  const text = msg.text

  try {
    const user = await User.findOne({ where: { telegram_id: telegramId } })

    switch (userState.action) {
      case "adding_group":
        await handleAddingGroup(bot, chatId, user, text, userState)
        break
      case "adding_task":
        await handleAddingTask(bot, chatId, user, text, userState)
        break
      case "adding_subject":
        await handleAddingSubject(bot, chatId, user, text, userState)
        break
      case "sending_notification":
        await handleSendingNotification(bot, chatId, user, text, userState)
        break
      case "editing_group_description":
        await handleEditingGroupDescription(bot, chatId, user, text, userState)
        break
      default:
        clearUserState(telegramId)
        break
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTextInput:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    clearUserState(telegramId)
  }
}

async function handleSendingNotification(bot, chatId, user, text, userState) {
  try {
    const { groupId } = userState.data

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      clearUserState(user.telegram_id)
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    const members = await UserGroup.findAll({
      where: { group_id: groupId },
      include: [{ model: User, where: { notifications_enabled: true } }],
    })

    if (members.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.")
      clearUserState(user.telegram_id)
      return
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
    const activeMembers = members.filter((member) => {
      const settings = member.User.settings || {}
      return settings[`group_${groupId}_notifications`] !== false
    })

    if (activeMembers.length === 0) {
      await bot.sendMessage(chatId, "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
      clearUserState(user.telegram_id)
      return
    }

    const notificationMessage =
      `üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞*\n\n` + `üë• –ì—Ä—É–ø–ø–∞: ${group.name}\n` + `üë®‚Äçüíº –û—Ç: ${user.first_name}\n\n` + `${text}`

    let successCount = 0
    let failCount = 0

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for (const member of activeMembers) {
      try {
        await bot.sendMessage(member.User.telegram_id, notificationMessage, {
          parse_mode: "Markdown",
        })
        successCount++
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member.User.telegram_id}:`, error)
        failCount++
      }
    }

    clearUserState(user.telegram_id)

    let resultMessage = `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n`
    resultMessage += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`
    resultMessage += `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n`
    if (failCount > 0) {
      resultMessage += `‚Ä¢ –û—à–∏–±–æ–∫: ${failCount}\n`
    }
    resultMessage += `‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${members.length}\n`

    await bot.sendMessage(chatId, resultMessage)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
    setTimeout(async () => {
      const { getGroupMenuKeyboard } = require("../utils/keyboards")

      const userGroup = await UserGroup.findOne({
        where: { user_id: user.id, group_id: groupId },
      })

      const keyboard = await getGroupMenuKeyboard(groupId, userGroup?.role || "member")

      await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: keyboard,
      })
    }, 2000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleSendingNotification:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    clearUserState(user.telegram_id)
  }
}

async function handleEditingGroupDescription(bot, chatId, user, text, userState) {
  try {
    const { groupId } = userState.data

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      clearUserState(user.telegram_id)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    await group.update({ description: text })

    clearUserState(user.telegram_id)

    await bot.sendMessage(chatId, `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${group.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã
    setTimeout(async () => {
      const { showGroupSettings } = require("./callbacks")
      await showGroupSettings(bot, chatId, user, groupId)
    }, 1500)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleEditingGroupDescription:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
    clearUserState(user.telegram_id)
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
async function handleAddingGroup(bot, chatId, user, text, userState) {
  if (userState.step === "name") {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
    const existingGroup = await Group.findOne({ where: { name: text } })
    const existingRequest = await GroupRequest.findOne({
      where: { group_name: text, status: "pending" },
    })

    if (existingGroup || existingRequest) {
      await bot.sendMessage(
        chatId,
        "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–µ—ë —É–∂–µ –ø–æ–¥–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
      )
      return
    }

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å—Ä–∞–∑—É, –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    const group = await Group.create({
      name: text,
      description: null, // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
      created_by: user.id,
      status: "active",
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞
    await UserGroup.create({
      user_id: user.id,
      group_id: group.id,
      role: "curator",
    })

    clearUserState(user.telegram_id)

    await bot.sendMessage(chatId, `‚úÖ –ì—Ä—É–ø–ø–∞ "${text}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–º.`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    setTimeout(async () => {
      const { getGroupMenuKeyboard } = require("../utils/keyboards")
      const keyboard = await getGroupMenuKeyboard(group.id, "curator")

      await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É "${group.name}"!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: keyboard,
      })
    }, 1500)
  }
}

async function handleAddingTask(bot, chatId, user, text, userState) {
  const { step, data } = userState

  switch (step) {
    case "title":
      setUserState(user.telegram_id, {
        ...userState,
        step: "description",
        data: { ...data, title: text },
      })
      await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
      break

    case "description":
      setUserState(user.telegram_id, {
        ...userState,
        step: "deadline",
        data: { ...data, description: text },
      })
      await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024):")
      break

    case "deadline":
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/
      const match = text.match(dateRegex)

      if (!match) {
        await bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
      }

      const [, day, month, year] = match
      const deadline = new Date(year, month - 1, day)

      if (deadline < new Date()) {
        await bot.sendMessage(chatId, "–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      const task = await Task.create({
        title: data.title,
        description: data.description,
        subject_id: data.subjectId,
        group_id: data.groupId,
        deadline: deadline,
        created_by: user.id,
        for_group: data.forGroup || false,
        status: data.needsApproval ? "pending" : "active",
      })

      clearUserState(user.telegram_id)

      if (data.needsApproval) {
        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–¥–∞—á–∞ "${data.title}" —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\n\n` +
            `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n` +
            `üë• –î–ª—è: –≤—Å–µ–π –≥—Ä—É–ø–ø—ã (–æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è)`,
        )
      } else {
        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–¥–∞—á–∞ "${data.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
            `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n` +
            `üë• –î–ª—è: ${data.forGroup ? "–≤—Å–µ–π –≥—Ä—É–ø–ø—ã" : "—Ç–æ–ª—å–∫–æ –≤–∞—Å"}`,
        )
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
      setTimeout(async () => {
        const { getGroupMenuKeyboard } = require("../utils/keyboards")

        const userGroup = await UserGroup.findOne({
          where: { user_id: user.id, group_id: data.groupId },
        })

        const keyboard = await getGroupMenuKeyboard(data.groupId, userGroup?.role || "member")

        await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
          reply_markup: keyboard,
        })
      }, 2000)
      break
  }
}

async function handleAddingSubject(bot, chatId, user, text, userState) {
  const { groupId, needsApproval, returnToTaskCreation } = userState.data

  if (needsApproval) {
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
    await SubjectRequest.create({
      subject_name: text,
      group_id: groupId,
      user_id: user.id,
    })

    await bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ "${text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.`)
  } else {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–∑—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫—É—Ä–∞—Ç–æ—Ä)
    const subject = await Subject.create({
      name: text,
      group_id: groupId,
      created_by: user.id,
      status: "active",
    })

    await bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${text}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`)

    // –ï—Å–ª–∏ –º—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞
    if (returnToTaskCreation) {
      clearUserState(user.telegram_id)

      setTimeout(async () => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        const subjects = await Subject.findAll({
          where: { group_id: groupId, status: "active" },
        })

        const keyboard = {
          inline_keyboard: [
            ...subjects.map((subj) => [
              {
                text: subj.name,
                callback_data: `select_subject_${subj.id}_${groupId}`,
              },
            ]),
            [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}` }],
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
          ],
        }

        await bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:", {
          reply_markup: keyboard,
        })
      }, 1500)

      return
    }
  }

  clearUserState(user.telegram_id)

  // –ï—Å–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
  if (!returnToTaskCreation) {
    setTimeout(async () => {
      const { getGroupMenuKeyboard } = require("../utils/keyboards")

      const userGroup = await UserGroup.findOne({
        where: { user_id: user.id, group_id: groupId },
      })

      const keyboard = await getGroupMenuKeyboard(groupId, userGroup?.role || "member")

      await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: keyboard,
      })
    }, 2000)
  }
}

module.exports = { handleTextInput }
