const { User, Group, UserGroup, Task, Subject, GroupRequest, SubjectRequest, UserTask } = require("../database/models")
const {
  getGroupMenuKeyboard,
  getTasksKeyboard,
  getPaginationKeyboard,
  getGroupSelectionKeyboard,
} = require("../utils/keyboards")
const { setUserState, getUserState, clearUserState } = require("../utils/userState")
const { Op } = require("sequelize")

async function handleGroupSelection(bot, chatId, user, data, messageId = null) {
  try {
    const groupId = data.split("_")[2]
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É ${groupId}`)

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    let userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      userGroup = await UserGroup.create({
        user_id: user.id,
        group_id: groupId,
        role: "member",
      })
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ${groupId} –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫`)
    }

    const keyboard = await getGroupMenuKeyboard(groupId, userGroup.role)

    const message = `–ì—Ä—É–ø–ø–∞: ${group.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

    if (messageId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard,
      })
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
      })
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupSelection:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.")
  }
}

async function handleAddSubject(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const groupId = parts[2]
    const fromTaskCreation = parts[3] === "task" // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É ${groupId}, –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${fromTaskCreation}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      await bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
      return
    }

    const isCurator = userGroup.role === "curator"

    setUserState(user.telegram_id, {
      action: "adding_subject",
      step: "name",
      data: {
        groupId: groupId,
        needsApproval: !isCurator,
        returnToTaskCreation: fromTaskCreation, // –§–ª–∞–≥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
      },
    })

    const message = isCurator
      ? "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"
      : "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞):\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"

    await bot.sendMessage(chatId, message, {
      reply_markup: { force_reply: true },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleAddSubject:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")
  }
}

async function handleSelectSubject(bot, chatId, user, data) {
  try {
    const [, , subjectId, groupId] = data.split("_")
    console.log(`–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç ${subjectId} –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupId}`)

    const subject = await Subject.findByPk(subjectId)
    if (!subject) {
      await bot.sendMessage(chatId, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    const isCurator = userGroup?.role === "curator"

    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–∞
    const keyboard = {
      inline_keyboard: [[{ text: "üë§ –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è", callback_data: `task_for_me_${subjectId}_${groupId}` }]],
    }

    if (isCurator) {
      keyboard.inline_keyboard.unshift([
        { text: "üë• –î–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã", callback_data: `task_for_group_${subjectId}_${groupId}` },
      ])
    } else {
      keyboard.inline_keyboard.push([
        { text: "üìù –î–ª—è –≥—Ä—É–ø–ø—ã (—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º)", callback_data: `task_for_group_approval_${subjectId}_${groupId}` },
      ])
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `group_menu_addtask_${groupId}` }])

    await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç: ${subject.name}\n\n–î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?`, {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleSelectSubject:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
  }
}

async function handleTaskCreationType(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const type = parts[2] // 'for'
    const target = parts[3] // 'me', 'group', –∏–ª–∏ 'group'
    const approval = parts[4] // –º–æ–∂–µ—Ç –±—ã—Ç—å 'approval'
    const subjectId = parts[parts.length - 2]
    const groupId = parts[parts.length - 1]

    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${type}_${target}_${approval || ""} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${subjectId}`)

    const forGroup = target === "group"
    const needsApproval = approval === "approval"

    setUserState(user.telegram_id, {
      action: "adding_task",
      step: "title",
      data: {
        subjectId: subjectId,
        groupId: groupId,
        forGroup: forGroup,
        needsApproval: needsApproval,
      },
    })

    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å", {
      reply_markup: { force_reply: true },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTaskCreationType:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏ÔøΩÔøΩ–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
  }
}

async function handleSubjectManagement(bot, chatId, user, groupId) {
  try {
    console.log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.")
      return
    }

    const subjects = await Subject.findAll({
      where: { group_id: groupId, status: "active" },
      include: [{ model: User, as: "Creator", attributes: ["first_name"] }],
    })

    if (subjects.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}` }],
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
          ],
        },
      })
      return
    }

    let message = "üìö *–ü—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã:*\n\n"

    subjects.forEach((subject, index) => {
      message += `${index + 1}. *${subject.name}*\n`
      message += `üë§ –°–æ–∑–¥–∞–ª: ${subject.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...subjects.map((subject) => [
          { text: `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å "${subject.name}"`, callback_data: `delete_subject_${subject.id}_${groupId}` },
        ]),
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}` }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleSubjectManagement:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.")
  }
}

async function handleDeleteSubject(bot, chatId, user, data) {
  try {
    const [, , subjectId, groupId] = data.split("_")

    const subject = await Subject.findByPk(subjectId)
    if (!subject) {
      await bot.sendMessage(chatId, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
    const tasksCount = await Task.count({ where: { subject_id: subjectId } })

    if (tasksCount > 0) {
      await bot.sendMessage(
        chatId,
        `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${subject.name}", —Ç–∞–∫ –∫–∞–∫ –ø–æ –Ω–µ–º—É –µ—Å—Ç—å ${tasksCount} –∑–∞–¥–∞—á(–∏).`,
      )
      return
    }

    await subject.destroy()

    await bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${subject.name}" —É–¥–∞–ª–µ–Ω.`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    setTimeout(() => handleSubjectManagement(bot, chatId, user, groupId), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleDeleteSubject:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")
  }
}

async function handleTaskDetails(bot, chatId, user, data) {
  try {
    const taskId = data.split("_")[2]

    const task = await Task.findByPk(taskId, {
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
        { model: Group, attributes: ["name"] },
      ],
    })

    if (!task) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const userTask = await UserTask.findOne({
      where: { user_id: user.id, task_id: taskId },
    })

    const isCompleted = userTask?.completed || false
    const deadline = new Date(task.deadline)
    const now = new Date()
    const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

    let status = ""
    if (daysLeft < 0) status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    else if (daysLeft <= 3) status = "üü° –°—Ä–æ—á–Ω–æ"
    else if (daysLeft <= 7) status = "üü† –°–∫–æ—Ä–æ"
    else status = "üü¢ –ï—Å—Ç—å –≤—Ä–µ–º—è"

    let message = `üìã *${task.title}*\n\n`
    message += `üìö –ü—Ä–µ–¥–º–µ—Ç: ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
    message += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
    message += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n`
    message += `${status} (${daysLeft > 0 ? daysLeft + " –¥–Ω." : "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"})\n`
    message += `üë§ –°–æ–∑–¥–∞–ª: ${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
    message += `üë• –ì—Ä—É–ø–ø–∞: ${task.Group?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
    message += `üéØ –î–ª—è: ${task.for_group ? "–≤—Å–µ–π –≥—Ä—É–ø–ø—ã" : "–ª–∏—á–Ω–∞—è"}\n`
    message += `‚úÖ –°—Ç–∞—Ç—É—Å: ${isCompleted ? "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}\n`

    const keyboard = {
      inline_keyboard: [],
    }

    if (!isCompleted) {
      keyboard.inline_keyboard.push([
        { text: "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", callback_data: `complete_task_${taskId}_${task.group_id}` },
      ])
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data: `group_menu_tasks_${task.group_id}` }])

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTaskDetails:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏.")
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
async function handleGroupMenu(bot, chatId, user, data) {
  try {
    const action = data.split("_")[2]
    const groupId = data.split("_")[3]

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã: ${action} –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupId}`)

    switch (action) {
      case "tasks":
        await showTasks(bot, chatId, user, groupId)
        break
      case "addtask":
        await startAddTask(bot, chatId, user, groupId)
        break
      case "complete":
        await showCompleteTasks(bot, chatId, user, groupId)
        break
      case "notify":
        await startGroupNotification(bot, chatId, user, groupId)
        break
      case "subjects":
        await handleSubjectManagement(bot, chatId, user, groupId)
        break
      case "settings":
        await showGroupSettings(bot, chatId, user, groupId)
        break
      default:
        await bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupMenu:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é.")
  }
}

async function showTasks(bot, chatId, user, groupId) {
  try {
    console.log(`–ü–æ–∫–∞–∑ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupId}`)

    const tasks = await Task.findAll({
      where: {
        group_id: groupId,
        [Op.or]: [{ for_group: true }, { created_by: user.id }],
      },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
      order: [["deadline", "ASC"]],
    })

    if (tasks.length === 0) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }]],
        },
      })
      return
    }

    let message = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n\n"

    for (let i = 0; i < tasks.length; i++) {
      const task = tasks[i]
      const deadline = new Date(task.deadline)
      const now = new Date()
      const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

      let status = ""
      if (daysLeft < 0) status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
      else if (daysLeft <= 3) status = "üü° –°—Ä–æ—á–Ω–æ"
      else if (daysLeft <= 7) status = "üü† –°–∫–æ—Ä–æ"
      else status = "üü¢ –ï—Å—Ç—å –≤—Ä–µ–º—è"

      message += `${i + 1}. *${task.title}*\n`
      message += `üìö ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
      message += `üìÖ ${deadline.toLocaleDateString("ru-RU")}\n`
      message += `${status} (${daysLeft > 0 ? daysLeft + " –¥–Ω." : "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"})\n`
      message += `üë§ ${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n`
    }

    const keyboard = {
      inline_keyboard: [
        ...tasks.slice(0, 10).map((task, index) => [
          {
            text: `${index + 1}. ${task.title}`,
            callback_data: `task_details_${task.id}`,
          },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
  }
}

async function startAddTask(bot, chatId, user, groupId) {
  try {
    console.log(`–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupId}`)

    const subjects = await Subject.findAll({
      where: { group_id: groupId, status: "active" },
    })

    if (subjects.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å–Ω–∞—á–∞–ª–∞.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}_task` }], // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ _task
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
          ],
        },
      })
      return
    }

    const keyboard = {
      inline_keyboard: [
        ...subjects.map((subject) => [
          {
            text: subject.name,
            callback_data: `select_subject_${subject.id}_${groupId}`,
          },
        ]),
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}_task` }], // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ _task
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:", {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ startAddTask:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
  }
}

async function showCompleteTasks(bot, chatId, user, groupId) {
  try {
    const tasks = await Task.findAll({
      where: {
        group_id: groupId,
        [Op.or]: [{ for_group: true }, { created_by: user.id }],
      },
      include: [
        { model: Subject, attributes: ["name"] },
        {
          model: User,
          through: {
            where: { user_id: user.id, completed: false },
            required: false,
          },
        },
      ],
      order: [["deadline", "ASC"]],
    })

    const incompleteTasks = tasks.filter((task) => {
      return !task.Users || task.Users.length === 0 || !task.Users[0].UserTask.completed
    })

    if (incompleteTasks.length === 0) {
      await bot.sendMessage(chatId, "–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }]],
        },
      })
      return
    }

    let message = "‚úÖ *–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"

    incompleteTasks.forEach((task, index) => {
      const deadline = new Date(task.deadline)
      message += `${index + 1}. *${task.title}*\n`
      message += `üìö ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
      message += `üìÖ ${deadline.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...incompleteTasks.slice(0, 10).map((task, index) => [
          {
            text: `‚úÖ ${index + 1}. ${task.title}`,
            callback_data: `complete_task_${task.id}_${groupId}`,
          },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showCompleteTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
  }
}

async function startGroupNotification(bot, chatId, user, groupId) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ ${groupId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ.")
      return
    }

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    setUserState(user.telegram_id, {
      action: "sending_notification",
      step: "message",
      data: { groupId: groupId },
    })

    await bot.sendMessage(
      chatId,
      `üì¢ *–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ "${group.name}"*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å`,
      {
        parse_mode: "Markdown",
        reply_markup: { force_reply: true },
      },
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ startGroupNotification:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
  }
}

async function showGroupSettings(bot, chatId, user, groupId) {
  try {
    console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã ${groupId}`)

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      await bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
      return
    }

    const isCurator = userGroup.role === "curator"

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
    const membersCount = await UserGroup.count({ where: { group_id: groupId } })
    const curatorsCount = await UserGroup.count({ where: { group_id: groupId, role: "curator" } })
    const subjectsCount = await Subject.count({ where: { group_id: groupId, status: "active" } })
    const tasksCount = await Task.count({ where: { group_id: groupId } })

    let message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã "${group.name}"*\n\n`
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`
    message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersCount}\n`
    message += `üë®‚Äçüíº –ö—É—Ä–∞—Ç–æ—Ä–æ–≤: ${curatorsCount}\n`
    message += `üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${subjectsCount}\n`
    message += `üìã –ó–∞–¥–∞—á: ${tasksCount}\n`
    message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${group.createdAt.toLocaleDateString("ru-RU")}\n\n`

    const keyboard = {
      inline_keyboard: [
        [{ text: "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã", callback_data: `group_members_${groupId}` }],
        [{ text: "üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: `notification_settings_${groupId}` }],
      ],
    }

    if (isCurator) {
      keyboard.inline_keyboard.push(
        [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á", callback_data: `group_stats_${groupId}` }],
        [{ text: "üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data: `edit_group_description_${groupId}` }],
        [{ text: "üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á", callback_data: `export_tasks_${groupId}` }],
      )
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }])

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showGroupSettings:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
  }
}

async function handleGroupMembers(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const members = await UserGroup.findAll({
      where: { group_id: groupId },
      include: [{ model: User, attributes: ["first_name", "username", "telegram_id"] }],
      order: [
        ["role", "DESC"],
        ["joined_at", "ASC"],
      ],
    })

    if (members.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
      return
    }

    let message = `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã "${group.name}":*\n\n`

    members.forEach((member, index) => {
      const roleEmoji = member.role === "curator" ? "üë®‚Äçüíº" : "üë§"
      const roleText = member.role === "curator" ? "–ö—É—Ä–∞—Ç–æ—Ä" : "–£—á–∞—Å—Ç–Ω–∏–∫"

      message += `${index + 1}. ${roleEmoji} ${member.User.first_name}`
      if (member.User.username) {
        message += ` (@${member.User.username})`
      }
      message += `\n   ${roleText} ‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${member.joined_at.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: `group_menu_settings_${groupId}` }]],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupMembers:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
  }
}

async function handleNotificationSettings(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const currentSettings = user.settings || {}
    const groupNotifications = currentSettings[`group_${groupId}_notifications`] !== false

    let message = `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`
    message += `–ì—Ä—É–ø–ø–∞: ${group.name}\n\n`
    message += `üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö: ${groupNotifications ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`
    message += `üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: ${user.notifications_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`
    message += `üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ${groupNotifications ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n\n`
    message += `*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n`
    message += `‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞\n`
    message += `‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞\n`
    message += `‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã\n`
    message += `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤\n`

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: groupNotifications ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã" : "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã",
            callback_data: `toggle_group_notifications_${groupId}`,
          },
        ],
        [
          {
            text: user.notifications_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" : "üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data: `toggle_all_notifications_${groupId}`,
          },
        ],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: `group_menu_settings_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleNotificationSettings:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
  }
}

async function handleToggleNotifications(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const type = parts[1] // 'group' –∏–ª–∏ 'all'
    const groupId = parts[parts.length - 1]

    if (type === "all") {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await user.update({
        notifications_enabled: !user.notifications_enabled,
      })

      const status = user.notifications_enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
      await bot.sendMessage(chatId, `üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}.`)
    } else if (type === "group") {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
      const currentSettings = user.settings || {}
      const settingKey = `group_${groupId}_notifications`
      const currentValue = currentSettings[settingKey] !== false

      currentSettings[settingKey] = !currentValue

      await user.update({ settings: currentSettings })

      const status = !currentValue ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
      await bot.sendMessage(chatId, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã ${status}.`)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setTimeout(() => handleNotificationSettings(bot, chatId, user, `notification_settings_${groupId}`), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleToggleNotifications:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
  }
}

async function handleGroupStats(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
      return
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalTasks = await Task.count({ where: { group_id: groupId } })
    const activeTasks = await Task.count({ where: { group_id: groupId, status: "active" } })
    const completedTasks = await UserTask.count({
      where: { completed: true },
      include: [{ model: Task, where: { group_id: groupId } }],
    })

    const overdueTasks = await Task.count({
      where: {
        group_id: groupId,
        deadline: { [Op.lt]: new Date() },
        status: "active",
      },
    })

    const urgentTasks = await Task.count({
      where: {
        group_id: groupId,
        deadline: {
          [Op.between]: [new Date(), new Date(Date.now() + 3 * 24 * 60 * 60 * 1000)],
        },
        status: "active",
      },
    })

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    const subjectStats = await Subject.findAll({
      where: { group_id: groupId, status: "active" },
      include: [
        {
          model: Task,
          attributes: [],
          required: false,
        },
      ],
      attributes: ["name", [require("sequelize").fn("COUNT", require("sequelize").col("Tasks.id")), "taskCount"]],
      group: ["Subject.id", "Subject.name"],
      raw: true,
    })

    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã "${group.name}"*\n\n`
    message += `üìã *–ó–∞–¥–∞—á–∏:*\n`
    message += `‚Ä¢ –í—Å–µ–≥–æ: ${totalTasks}\n`
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks}\n`
    message += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks}\n`
    message += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${overdueTasks}\n`
    message += `‚Ä¢ –°—Ä–æ—á–Ω—ã—Ö (‚â§3 –¥–Ω—è): ${urgentTasks}\n\n`

    if (subjectStats.length > 0) {
      message += `üìö *–ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:*\n`
      subjectStats.forEach((subject) => {
        message += `‚Ä¢ ${subject.name}: ${subject.taskCount} –∑–∞–¥–∞—á\n`
      })
      message += `\n`
    }

    const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`
    message += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${completionRate}%\n`
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${overdueTasks === 0 ? "üü¢ –•–æ—Ä–æ—à–∞—è" : overdueTasks <= 2 ? "üü° –°—Ä–µ–¥–Ω—è—è" : "üî¥ –ù–∏–∑–∫–∞—è"}\n`

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data: `detailed_report_${groupId}` }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: `group_menu_settings_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupStats:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
  }
}

async function handleEditGroupDescription(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[3] // edit_group_description_${groupId}

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
      return
    }

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    setUserState(user.telegram_id, {
      action: "editing_group_description",
      step: "description",
      data: { groupId: groupId },
    })

    let message = `üè∑Ô∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã "${group.name}"*\n\n`
    message += `–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${group.description || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n`
    message += `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å`

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: { force_reply: true },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleEditGroupDescription:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
  }
}

async function handleExportTasks(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
      return
    }

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const tasks = await Task.findAll({
      where: { group_id: groupId },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
      order: [["deadline", "ASC"]],
    })

    if (tasks.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
      return
    }

    let exportText = `üìã –≠–ö–°–ü–û–†–¢ –ó–ê–î–ê–ß –ì–†–£–ü–ü–´ "${group.name.toUpperCase()}"\n`
    exportText += `üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleDateString("ru-RU")}\n`
    exportText += `üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}\n\n`
    exportText += `${"=".repeat(50)}\n\n`

    tasks.forEach((task, index) => {
      const deadline = new Date(task.deadline)
      const now = new Date()
      const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

      let status = ""
      if (daysLeft < 0) status = "–ü–†–û–°–†–û–ß–ï–ù–û"
      else if (daysLeft <= 3) status = "–°–†–û–ß–ù–û"
      else if (daysLeft <= 7) status = "–°–ö–û–†–û"
      else status = "–ï–°–¢–¨ –í–†–ï–ú–Ø"

      exportText += `${index + 1}. ${task.title}\n`
      exportText += `   –ü—Ä–µ–¥–º–µ—Ç: ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
      exportText += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
      exportText += `   –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n`
      exportText += `   –°—Ç–∞—Ç—É—Å: ${status}\n`
      exportText += `   –°–æ–∑–¥–∞–ª: ${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
      exportText += `   –î–ª—è: ${task.for_group ? "–≤—Å–µ–π –≥—Ä—É–ø–ø—ã" : "–ª–∏—á–Ω–∞—è"}\n`
      exportText += `   ${"-".repeat(30)}\n\n`
    })

    exportText += `${"=".repeat(50)}\n`
    exportText += `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Telegram –±–æ—Ç–∞\n`
    exportText += `${new Date().toLocaleString("ru-RU")}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
    await bot.sendDocument(chatId, Buffer.from(exportText, "utf8"), {
      filename: `tasks_${group.name}_${new Date().toISOString().split("T")[0]}.txt`,
      caption: `üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã "${group.name}"`,
    })

    await bot.sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleExportTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á.")
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º setupCallbacks –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function setupCallbacks(bot) {
  bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message
    const chatId = msg.chat.id
    const telegramId = callbackQuery.from.id
    const data = callbackQuery.data

    try {
      await bot.answerCallbackQuery(callbackQuery.id)

      const user = await User.findOne({ where: { telegram_id: telegramId } })
      if (!user) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", telegramId)
        return
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
      if (data.startsWith("select_group_")) {
        await handleGroupSelection(bot, chatId, user, data, msg.message_id)
      } else if (data.startsWith("group_menu_")) {
        await handleGroupMenu(bot, chatId, user, data)
      } else if (data === "add_group") {
        await handleAddGroup(bot, chatId, user)
      } else if (data === "pending_groups") {
        await handlePendingGroups(bot, chatId, user)
      } else if (data.startsWith("admin_")) {
        await handleAdminActions(bot, chatId, user, data)
      } else if (data.startsWith("approve_group_") || data.startsWith("reject_group_")) {
        await handleGroupRequestAction(bot, chatId, user, data)
      } else if (data === "back_to_groups") {
        await handleBackToGroups(bot, chatId, user)
      } else if (data.startsWith("join_group_")) {
        await handleJoinGroup(bot, chatId, user, data)
      } else if (data === "back_to_admin") {
        await showAdminPanel(bot, chatId, user)
      } else if (data.startsWith("complete_task_")) {
        await handleCompleteTask(bot, chatId, user, data)
      } else if (data.startsWith("add_subject_")) {
        await handleAddSubject(bot, chatId, user, data)
      } else if (data.startsWith("select_subject_")) {
        await handleSelectSubject(bot, chatId, user, data)
      } else if (data.startsWith("task_for_")) {
        await handleTaskCreationType(bot, chatId, user, data)
      } else if (data.startsWith("delete_subject_")) {
        await handleDeleteSubject(bot, chatId, user, data)
      } else if (data.startsWith("task_details_")) {
        await handleTaskDetails(bot, chatId, user, data)
      } else if (data.startsWith("group_members_")) {
        await handleGroupMembers(bot, chatId, user, data)
      } else if (data.startsWith("notification_settings_")) {
        await handleNotificationSettings(bot, chatId, user, data)
      } else if (data.startsWith("toggle_")) {
        await handleToggleNotifications(bot, chatId, user, data)
      } else if (data.startsWith("group_stats_")) {
        await handleGroupStats(bot, chatId, user, data)
      } else if (data.startsWith("edit_group_description_")) {
        await handleEditGroupDescription(bot, chatId, user, data)
      } else if (data.startsWith("export_tasks_")) {
        await handleExportTasks(bot, chatId, user, data)
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback handler:", error)
      console.error("Stack trace:", error.stack)
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
  })
}

async function handleCompleteTask(bot, chatId, user, data) {
  try {
    const [, , taskId, groupId] = data.split("_")

    const task = await Task.findByPk(taskId, {
      include: [{ model: Subject, attributes: ["name"] }],
    })

    if (!task) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
    const existingUserTask = await UserTask.findOne({
      where: { user_id: user.id, task_id: taskId },
    })

    if (existingUserTask && existingUserTask.completed) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
      return
    }

    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    if (existingUserTask) {
      await existingUserTask.update({
        completed: true,
        completed_at: new Date(),
      })
    } else {
      await UserTask.create({
        user_id: user.id,
        task_id: taskId,
        completed: true,
        completed_at: new Date(),
      })
    }

    await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    setTimeout(() => showCompleteTasks(bot, chatId, user, groupId), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleCompleteTask:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏.")
  }
}

async function handlePendingGroups(bot, chatId, user) {
  try {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.id)

    const allGroups = await Group.findAll({
      where: { status: "active" },
      include: [
        {
          model: User,
          as: "Creator",
          attributes: ["first_name", "username"],
          required: false,
        },
      ],
    })

    console.log("–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø:", allGroups.length)

    const userGroups = await UserGroup.findAll({
      where: { user_id: user.id },
      attributes: ["group_id"],
    })

    const userGroupIds = userGroups.map((ug) => ug.group_id)
    const availableGroups = allGroups.filter((group) => !userGroupIds.includes(group.id))

    console.log("–î–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:", availableGroups.length)

    if (availableGroups.length === 0) {
      await bot.sendMessage(
        chatId,
        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data: "add_group" }],
              [{ text: "üîô –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data: "back_to_groups" }],
            ],
          },
        },
      )
      return
    }

    let message = "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n\n"

    availableGroups.forEach((group, index) => {
      message += `${index + 1}. *${group.name}*\n`
      message += `üìÑ ${group.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
      message += `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${group.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
      message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${group.createdAt.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...availableGroups.slice(0, 5).map((group) => [
          {
            text: `üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ "${group.name}"`,
            callback_data: `join_group_${group.id}`,
          },
        ]),
        [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data: "add_group" }],
        [{ text: "üîô –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data: "back_to_groups" }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")
  }
}

async function handleAdminActions(bot, chatId, user, data) {
  if (user.role !== "admin") {
    await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return
  }

  const action = data.split("_")[1]

  switch (action) {
    case "roles":
      await showRoleManagement(bot, chatId)
      break
    case "group":
      if (data === "admin_group_requests") {
        await showGroupRequests(bot, chatId)
      }
      break
    default:
      await bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
  }
}

async function showRoleManagement(bot, chatId) {
  await bot.sendMessage(chatId, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", {
    reply_markup: {
      inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }]],
    },
  })
}

async function showGroupRequests(bot, chatId) {
  try {
    const requests = await GroupRequest.findAll({
      where: { status: "pending" },
      include: [{ model: User, attributes: ["first_name", "username"] }],
      order: [["createdAt", "DESC"]],
    })

    if (requests.length === 0) {
      await bot.sendMessage(chatId, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }]],
        },
      })
      return
    }

    let message = "üìù *–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø:*\n\n"

    requests.forEach((request, index) => {
      message += `${index + 1}. *${request.group_name}*\n`
      message += `üìÑ ${request.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
      message += `üë§ –û—Ç: ${request.User.first_name}`
      if (request.User.username) {
        message += ` (@${request.User.username})`
      }
      message += `\nüìÖ ${request.createdAt.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...requests.slice(0, 5).map((request) => [
          { text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å "${request.group_name}"`, callback_data: `approve_group_${request.id}` },
          { text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å "${request.group_name}"`, callback_data: `reject_group_${request.id}` },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showGroupRequests:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.")
  }
}

async function handleGroupRequestAction(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const action = parts[0] // approve –∏–ª–∏ reject
    const requestId = parts[2]

    const request = await GroupRequest.findByPk(requestId, {
      include: [{ model: User, attributes: ["first_name", "telegram_id"] }],
    })

    if (!request) {
      await bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    if (action === "approve") {
      // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
      const group = await Group.create({
        name: request.group_name,
        description: request.description,
        created_by: request.user_id,
        status: "active",
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞
      await UserGroup.create({
        user_id: request.user_id,
        group_id: group.id,
        role: "curator",
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await request.update({ status: "approved" })

      await bot.sendMessage(chatId, `‚úÖ –ì—Ä—É–ø–ø–∞ "${request.group_name}" –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞!`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await bot.sendMessage(
          request.User.telegram_id,
          `üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${request.group_name}" –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ.`,
        )
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      }
    } else if (action === "reject") {
      await request.update({ status: "rejected" })

      await bot.sendMessage(chatId, `‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É "${request.group_name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await bot.sendMessage(
          request.User.telegram_id,
          `üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${request.group_name}" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
        )
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    setTimeout(() => showGroupRequests(bot, chatId), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupRequestAction:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
  }
}

async function handleBackToGroups(bot, chatId, user) {
  try {
    const keyboard = await getGroupSelectionKeyboard(user.id)

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥—Ä—É–ø–ø–∞–º:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
  }
}

async function handleJoinGroup(bot, chatId, user, data) {
  const groupId = data.split("_")[2]

  try {
    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const existingMembership = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (existingMembership) {
      await bot.sendMessage(chatId, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
      return
    }

    await UserGroup.create({
      user_id: user.id,
      group_id: groupId,
      role: "member",
    })

    await bot.sendMessage(chatId, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ "${group.name}"!`)

    setTimeout(async () => {
      const keyboard = await getGroupMenuKeyboard(groupId, "member")
      await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É "${group.name}"!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: keyboard,
      })
    }, 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ.")
  }
}

async function handleAddGroup(bot, chatId, user) {
  setUserState(user.telegram_id, {
    action: "adding_group",
    step: "name",
  })

  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å", {
    reply_markup: { force_reply: true },
  })
}

async function showAdminPanel(bot, chatId, user) {
  const adminKeyboard = {
    inline_keyboard: [
      [{ text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data: "admin_roles" }],
      [{ text: "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã", callback_data: "admin_group_requests" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_groups" }],
    ],
  }

  await bot.sendMessage(chatId, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", {
    reply_markup: adminKeyboard,
  })
}

module.exports = { setupCallbacks }
