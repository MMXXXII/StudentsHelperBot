const { User, Group, UserGroup, Task, Subject, GroupRequest, SubjectRequest, UserTask } = require("../database/models")
const {
  getGroupMenuKeyboard,
  getTasksKeyboard,
  getPaginationKeyboard,
  getGroupSelectionKeyboard,
} = require("../utils/keyboards")
const { setUserState, getUserState, clearUserState } = require("../utils/userState")
const { Op } = require("sequelize")

async function handleGroupSelection(bot, chatId, user, data, messageId = null) {
  try {
    const groupId = data.split("_")[2]
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É ${groupId}`)

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    let userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      userGroup = await UserGroup.create({
        user_id: user.id,
        group_id: groupId,
        role: "member",
      })
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ${groupId} –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫`)
    }

    const keyboard = await getGroupMenuKeyboard(groupId, userGroup.role)
    const message = `–ì—Ä—É–ø–ø–∞: ${group.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

    if (messageId) {
      try {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: keyboard,
        })
      } catch (error) {
        await bot.sendMessage(chatId, message, { reply_markup: keyboard })
      }
    } else {
      await bot.sendMessage(chatId, message, { reply_markup: keyboard })
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupSelection:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.")
  }
}

async function handleAddSubject(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const groupId = parts[2]
    const fromTaskCreation = parts[3] === "task"

    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      await bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
      return
    }

    const isCurator = userGroup.role === "curator"

    setUserState(user.telegram_id, {
      action: "adding_subject",
      step: "name",
      data: {
        groupId: groupId,
        needsApproval: !isCurator,
        returnToTaskCreation: fromTaskCreation,
      },
    })

    const message = isCurator
      ? "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"
      : "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞):\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"

    await bot.sendMessage(chatId, message, {
      reply_markup: { force_reply: true },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleAddSubject:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")
  }
}

async function handleSelectSubject(bot, chatId, user, data) {
  try {
    const [, , subjectId, groupId] = data.split("_")

    const subject = await Subject.findByPk(subjectId)
    if (!subject) {
      await bot.sendMessage(chatId, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
      return
    }

    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    const isCurator = userGroup?.role === "curator"

    const keyboard = {
      inline_keyboard: [[{ text: "üë§ –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è", callback_data: `task_for_me_${subjectId}_${groupId}` }]],
    }

    if (isCurator) {
      keyboard.inline_keyboard.unshift([
        { text: "üë• –î–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã", callback_data: `task_for_group_${subjectId}_${groupId}` },
      ])
    } else {
      keyboard.inline_keyboard.push([
        { text: "üìù –î–ª—è –≥—Ä—É–ø–ø—ã (—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º)", callback_data: `task_for_group_approval_${subjectId}_${groupId}` },
      ])
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `group_menu_addtask_${groupId}` }])

    await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç: ${subject.name}\n\n–î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?`, {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleSelectSubject:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
  }
}

async function handleTaskCreationType(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const subjectId = parts[parts.length - 2]
    const groupId = parts[parts.length - 1]

    const forGroup = parts.includes("group")
    const needsApproval = parts.includes("approval")

    setUserState(user.telegram_id, {
      action: "adding_task",
      step: "title",
      data: {
        subjectId: subjectId,
        groupId: groupId,
        forGroup: forGroup,
        needsApproval: needsApproval,
      },
    })

    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å", {
      reply_markup: { force_reply: true },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTaskCreationType:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
  }
}

async function handleGroupMenu(bot, chatId, user, data) {
  try {
    const action = data.split("_")[2]
    const groupId = data.split("_")[3]

    switch (action) {
      case "tasks":
        await showTasks(bot, chatId, user, groupId)
        break
      case "addtask":
        await startAddTask(bot, chatId, user, groupId)
        break
      case "complete":
        await showCompleteTasks(bot, chatId, user, groupId)
        break
      case "notify":
        await startGroupNotification(bot, chatId, user, groupId)
        break
      case "subjects":
        await handleSubjectManagement(bot, chatId, user, groupId)
        break
      case "settings":
        await showGroupSettings(bot, chatId, user, groupId)
        break
      default:
        await bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupMenu:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é.")
  }
}

async function showTasks(bot, chatId, user, groupId) {
  try {
    const tasks = await Task.findAll({
      where: {
        group_id: groupId,
        [Op.or]: [{ for_group: true }, { created_by: user.id }],
      },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
      order: [["deadline", "ASC"]],
    })

    if (tasks.length === 0) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }]],
        },
      })
      return
    }

    let message = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n\n"

    for (let i = 0; i < tasks.length; i++) {
      const task = tasks[i]
      const deadline = new Date(task.deadline)
      const now = new Date()
      const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

      let status = ""
      if (daysLeft < 0) status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
      else if (daysLeft <= 3) status = "üü° –°—Ä–æ—á–Ω–æ"
      else if (daysLeft <= 7) status = "üü† –°–∫–æ—Ä–æ"
      else status = "üü¢ –ï—Å—Ç—å –≤—Ä–µ–º—è"

      message += `${i + 1}. *${task.title}*\n`
      message += `üìö ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
      message += `üìÖ ${deadline.toLocaleDateString("ru-RU")}\n`
      message += `${status} (${daysLeft > 0 ? daysLeft + " –¥–Ω." : "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"})\n`
      message += `üë§ ${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n`
    }

    const keyboard = {
      inline_keyboard: [
        ...tasks.slice(0, 10).map((task, index) => [
          {
            text: `${index + 1}. ${task.title}`,
            callback_data: `task_details_${task.id}`,
          },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
  }
}

async function startAddTask(bot, chatId, user, groupId) {
  try {
    const subjects = await Subject.findAll({
      where: { group_id: groupId, status: "active" },
    })

    if (subjects.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å–Ω–∞—á–∞–ª–∞.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}_task` }],
            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
          ],
        },
      })
      return
    }

    const keyboard = {
      inline_keyboard: [
        ...subjects.map((subject) => [
          {
            text: subject.name,
            callback_data: `select_subject_${subject.id}_${groupId}`,
          },
        ]),
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data: `add_subject_${groupId}_task` }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:", {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ startAddTask:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
  }
}

async function showCompleteTasks(bot, chatId, user, groupId) {
  try {
    const tasks = await Task.findAll({
      where: {
        group_id: groupId,
        [Op.or]: [{ for_group: true }, { created_by: user.id }],
      },
      include: [
        { model: Subject, attributes: ["name"] },
        {
          model: User,
          through: {
            where: { user_id: user.id, completed: false },
            required: false,
          },
        },
      ],
      order: [["deadline", "ASC"]],
    })

    const incompleteTasks = tasks.filter((task) => {
      return !task.Users || task.Users.length === 0 || !task.Users[0].UserTask.completed
    })

    if (incompleteTasks.length === 0) {
      await bot.sendMessage(chatId, "–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }]],
        },
      })
      return
    }

    let message = "‚úÖ *–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"

    incompleteTasks.forEach((task, index) => {
      const deadline = new Date(task.deadline)
      message += `${index + 1}. *${task.title}*\n`
      message += `üìö ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
      message += `üìÖ ${deadline.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...incompleteTasks.slice(0, 10).map((task, index) => [
          {
            text: `‚úÖ ${index + 1}. ${task.title}`,
            callback_data: `complete_task_${task.id}_${groupId}`,
          },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showCompleteTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
  }
}

async function startGroupNotification(bot, chatId, user, groupId) {
  try {
    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ.")
      return
    }

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    setUserState(user.telegram_id, {
      action: "sending_notification",
      step: "message",
      data: { groupId: groupId },
    })

    await bot.sendMessage(
      chatId,
      `üì¢ *–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ "${group.name}"*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å`,
      {
        parse_mode: "Markdown",
        reply_markup: { force_reply: true },
      },
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ startGroupNotification:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
  }
}

async function showGroupSettings(bot, chatId, user, groupId) {
  try {
    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup) {
      await bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
      return
    }

    const isCurator = userGroup.role === "curator"

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
    const membersCount = await UserGroup.count({ where: { group_id: groupId } })
    const curatorsCount = await UserGroup.count({ where: { group_id: groupId, role: "curator" } })
    const subjectsCount = await Subject.count({ where: { group_id: groupId, status: "active" } })
    const tasksCount = await Task.count({ where: { group_id: groupId } })

    let message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã "${group.name}"*\n\n`
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`
    message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersCount}\n`
    message += `üë®‚Äçüíº –ö—É—Ä–∞—Ç–æ—Ä–æ–≤: ${curatorsCount}\n`
    message += `üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${subjectsCount}\n`
    message += `üìã –ó–∞–¥–∞—á: ${tasksCount}\n`
    message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${group.createdAt.toLocaleDateString("ru-RU")}\n\n`

    const keyboard = {
      inline_keyboard: [
        [{ text: "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã", callback_data: `group_members_${groupId}` }],
        [{ text: "üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: `notification_settings_${groupId}` }],
      ],
    }

    if (isCurator) {
      keyboard.inline_keyboard.push(
        [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á", callback_data: `group_stats_${groupId}` }],
        [{ text: "üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data: `edit_group_description_${groupId}` }],
        [{ text: "üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á", callback_data: `export_tasks_${groupId}` }],
      )
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `select_group_${groupId}` }])

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showGroupSettings:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
async function showRoleManagement(bot, chatId, user) {
  try {
    if (user.role !== "admin") {
      await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
      return
    }

    const groups = await Group.findAll({
      where: { status: "active" },
      order: [["name", "ASC"]],
    })

    if (groups.length === 0) {
      await bot.sendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }]],
        },
      })
      return
    }

    const message = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"

    const keyboard = {
      inline_keyboard: [
        ...groups.slice(0, 10).map((group) => [
          {
            text: group.name,
            callback_data: `role_group_${group.id}`,
          },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showRoleManagement:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.")
  }
}

async function showGroupUsers(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const members = await UserGroup.findAll({
      where: { group_id: groupId },
      include: [{ model: User, attributes: ["first_name", "username", "telegram_id"] }],
      order: [
        ["role", "DESC"],
        ["joined_at", "ASC"],
      ],
    })

    if (members.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "admin_roles" }]],
        },
      })
      return
    }

    let message = `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã "${group.name}":*\n\n`

    const keyboard = {
      inline_keyboard: [],
    }

    members.forEach((member, index) => {
      const roleEmoji = member.role === "curator" ? "üë®‚Äçüíº" : "üë§"
      const roleText = member.role === "curator" ? "–ö—É—Ä–∞—Ç–æ—Ä" : "–£—á–∞—Å—Ç–Ω–∏–∫"

      message += `${index + 1}. ${roleEmoji} ${member.User.first_name}`
      if (member.User.username) {
        message += ` (@${member.User.username})`
      }
      message += `\n   ${roleText}\n\n`

      keyboard.inline_keyboard.push([
        {
          text: `${roleEmoji} ${member.User.first_name} - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å`,
          callback_data: `change_role_${member.user_id}_${groupId}`,
        },
      ])
    })

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "admin_roles" }])

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showGroupUsers:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
  }
}

async function handleRoleChange(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const userId = parts[2]
    const groupId = parts[3]

    const targetUser = await User.findByPk(userId)
    const group = await Group.findByPk(groupId)

    if (!targetUser || !group) {
      await bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
      return
    }

    const userGroup = await UserGroup.findOne({
      where: { user_id: userId, group_id: groupId },
    })

    if (!userGroup) {
      await bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
      return
    }

    const currentRole = userGroup.role
    const newRole = currentRole === "curator" ? "member" : "curator"

    await userGroup.update({ role: newRole })

    const roleText = newRole === "curator" ? "–∫—É—Ä–∞—Ç–æ—Ä–æ–º" : "—É—á–∞—Å—Ç–Ω–∏–∫–æ–º"
    await bot.sendMessage(chatId, `‚úÖ ${targetUser.first_name} —Ç–µ–ø–µ—Ä—å ${roleText} –≥—Ä—É–ø–ø—ã "${group.name}".`)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await bot.sendMessage(
        targetUser.telegram_id,
        `üîÑ –í–∞—à–∞ —Ä–æ–ª—å –≤ –≥—Ä—É–ø–ø–µ "${group.name}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newRole === "curator" ? "–ö—É—Ä–∞—Ç–æ—Ä" : "–£—á–∞—Å—Ç–Ω–∏–∫"}`,
      )
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setTimeout(() => showGroupUsers(bot, chatId, user, `role_group_${groupId}`), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleRoleChange:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
  }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
async function handleExportTasks(bot, chatId, user, data) {
  try {
    const groupId = data.split("_")[2]

    const userGroup = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (!userGroup || userGroup.role !== "curator") {
      await bot.sendMessage(chatId, "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
      return
    }

    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const tasks = await Task.findAll({
      where: { group_id: groupId },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
      order: [["deadline", "ASC"]],
    })

    if (tasks.length === 0) {
      await bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
      return
    }

    // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
    let csvContent = "‚Ññ,–ù–∞–∑–≤–∞–Ω–∏–µ,–ü—Ä–µ–¥–º–µ—Ç,–û–ø–∏—Å–∞–Ω–∏–µ,–î–µ–¥–ª–∞–π–Ω,–°—Ç–∞—Ç—É—Å,–°–æ–∑–¥–∞—Ç–µ–ª—å,–¢–∏–ø\n"

    tasks.forEach((task, index) => {
      const deadline = new Date(task.deadline)
      const now = new Date()
      const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

      let status = ""
      if (daysLeft < 0) status = "–ü–†–û–°–†–û–ß–ï–ù–û"
      else if (daysLeft <= 3) status = "–°–†–û–ß–ù–û"
      else if (daysLeft <= 7) status = "–°–ö–û–†–û"
      else status = "–ï–°–¢–¨ –í–†–ï–ú–Ø"

      const row = [
        index + 1,
        `"${task.title.replace(/"/g, '""')}"`,
        `"${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}"`,
        `"${(task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è").replace(/"/g, '""')}"`,
        deadline.toLocaleDateString("ru-RU"),
        status,
        `"${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}"`,
        task.for_group ? "–î–ª—è –≥—Ä—É–ø–ø—ã" : "–õ–∏—á–Ω–∞—è",
      ].join(",")

      csvContent += row + "\n"
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    const fileName = `tasks_${group.name.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø]/g, "_")}_${
      new Date().toISOString().split("T")[0]
    }.csv`

    await bot.sendDocument(
      chatId,
      Buffer.from("\uFEFF" + csvContent, "utf8"), // BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
      {
        filename: fileName,
        caption: `üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã "${group.name}"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`,
      },
      {
        contentType: "text/csv",
      },
    )

    await bot.sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!")
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleExportTasks:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á.")
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤
function setupCallbacks(bot) {
  bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message
    const chatId = msg.chat.id
    const telegramId = callbackQuery.from.id
    const data = callbackQuery.data

    try {
      await bot.answerCallbackQuery(callbackQuery.id)

      const user = await User.findOne({ where: { telegram_id: telegramId } })
      if (!user) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", telegramId)
        return
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`)

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin_
      if (data.startsWith("select_group_")) {
        await handleGroupSelection(bot, chatId, user, data, msg.message_id)
      } else if (data.startsWith("group_menu_")) {
        await handleGroupMenu(bot, chatId, user, data)
      } else if (data === "add_group") {
        await handleAddGroup(bot, chatId, user)
      } else if (data === "pending_groups") {
        await handlePendingGroups(bot, chatId, user)
      } else if (data.startsWith("admin_")) {
        // –¢–û–õ–¨–ö–û –û–î–ò–ù –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_ callback'–æ–≤
        await handleAdminActions(bot, chatId, user, data)
      } else if (data.startsWith("approve_group_") || data.startsWith("reject_group_")) {
        await handleGroupRequestAction(bot, chatId, user, data)
      } else if (data === "back_to_groups") {
        await handleBackToGroups(bot, chatId, user)
      } else if (data.startsWith("join_group_")) {
        await handleJoinGroup(bot, chatId, user, data)
      } else if (data === "back_to_admin") {
        await showAdminPanel(bot, chatId, user)
      } else if (data.startsWith("complete_task_")) {
        await handleCompleteTask(bot, chatId, user, data)
      } else if (data.startsWith("add_subject_")) {
        await handleAddSubject(bot, chatId, user, data)
      } else if (data.startsWith("select_subject_")) {
        await handleSelectSubject(bot, chatId, user, data)
      } else if (data.startsWith("task_for_")) {
        await handleTaskCreationType(bot, chatId, user, data)
      } else if (data.startsWith("task_details_")) {
        await handleTaskDetails(bot, chatId, user, data)
      } else if (data.startsWith("export_tasks_")) {
        await handleExportTasks(bot, chatId, user, data)
      } else if (data.startsWith("role_group_")) {
        await showGroupUsers(bot, chatId, user, data)
      } else if (data.startsWith("change_role_")) {
        await handleRoleChange(bot, chatId, user, data)
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback handler:", error)
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
  })
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
async function handleCompleteTask(bot, chatId, user, data) {
  try {
    const [, , taskId, groupId] = data.split("_")
    const task = await Task.findByPk(taskId, {
      include: [{ model: Subject, attributes: ["name"] }],
    })

    if (!task) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const existingUserTask = await UserTask.findOne({
      where: { user_id: user.id, task_id: taskId },
    })

    if (existingUserTask && existingUserTask.completed) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
      return
    }

    if (existingUserTask) {
      await existingUserTask.update({
        completed: true,
        completed_at: new Date(),
      })
    } else {
      await UserTask.create({
        user_id: user.id,
        task_id: taskId,
        completed: true,
        completed_at: new Date(),
      })
    }

    await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!`)
    setTimeout(() => showCompleteTasks(bot, chatId, user, groupId), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleCompleteTask:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏.")
  }
}

async function handleTaskDetails(bot, chatId, user, data) {
  try {
    const taskId = data.split("_")[2]
    const task = await Task.findByPk(taskId, {
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
        { model: Group, attributes: ["name"] },
      ],
    })

    if (!task) {
      await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const userTask = await UserTask.findOne({
      where: { user_id: user.id, task_id: taskId },
    })

    const isCompleted = userTask?.completed || false
    const deadline = new Date(task.deadline)
    const now = new Date()
    const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24))

    let status = ""
    if (daysLeft < 0) status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    else if (daysLeft <= 3) status = "üü° –°—Ä–æ—á–Ω–æ"
    else if (daysLeft <= 7) status = "üü† –°–∫–æ—Ä–æ"
    else status = "üü¢ –ï—Å—Ç—å –≤—Ä–µ–º—è"

    let message = `üìã *${task.title}*\n\n`
    message += `üìö –ü—Ä–µ–¥–º–µ—Ç: ${task.Subject?.name || "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞"}\n`
    message += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
    message += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n`
    message += `${status} (${daysLeft > 0 ? daysLeft + " –¥–Ω." : "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"})\n`
    message += `üë§ –°–æ–∑–¥–∞–ª: ${task.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
    message += `üë• –ì—Ä—É–ø–ø–∞: ${task.Group?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
    message += `üéØ –î–ª—è: ${task.for_group ? "–≤—Å–µ–π –≥—Ä—É–ø–ø—ã" : "–ª–∏—á–Ω–∞—è"}\n`
    message += `‚úÖ –°—Ç–∞—Ç—É—Å: ${isCompleted ? "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}\n`

    const keyboard = {
      inline_keyboard: [],
    }

    if (!isCompleted) {
      keyboard.inline_keyboard.push([
        { text: "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", callback_data: `complete_task_${taskId}_${task.group_id}` },
      ])
    }

    keyboard.inline_keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data: `group_menu_tasks_${task.group_id}` }])

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTaskDetails:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏.")
  }
}

async function handlePendingGroups(bot, chatId, user) {
  try {
    const allGroups = await Group.findAll({
      where: { status: "active" },
      include: [
        {
          model: User,
          as: "Creator",
          attributes: ["first_name", "username"],
          required: false,
        },
      ],
    })

    const userGroups = await UserGroup.findAll({
      where: { user_id: user.id },
      attributes: ["group_id"],
    })

    const userGroupIds = userGroups.map((ug) => ug.group_id)
    const availableGroups = allGroups.filter((group) => !userGroupIds.includes(group.id))

    if (availableGroups.length === 0) {
      await bot.sendMessage(
        chatId,
        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data: "add_group" }],
              [{ text: "üîô –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data: "back_to_groups" }],
            ],
          },
        },
      )
      return
    }

    let message = "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n\n"

    availableGroups.forEach((group, index) => {
      message += `${index + 1}. *${group.name}*\n`
      message += `üìÑ ${group.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
      message += `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${group.Creator?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`
      message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${group.createdAt.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...availableGroups.slice(0, 5).map((group) => [
          {
            text: `üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ "${group.name}"`,
            callback_data: `join_group_${group.id}`,
          },
        ]),
        [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data: "add_group" }],
        [{ text: "üîô –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data: "back_to_groups" }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")
  }
}

async function handleAdminActions(bot, chatId, user, data) {
  if (user.role !== "admin") {
    await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return
  }

  const action = data.split("_")[1]

  switch (action) {
    case "roles":
      await showRoleManagement(bot, chatId, user)
      break
    case "group":
      if (data === "admin_group_requests") {
        await showGroupRequests(bot, chatId)
      }
      break
    default:
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
      console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", action)
  }
}

async function showGroupRequests(bot, chatId) {
  try {
    const requests = await GroupRequest.findAll({
      where: { status: "pending" },
      include: [{ model: User, attributes: ["first_name", "username"] }],
      order: [["createdAt", "DESC"]],
    })

    if (requests.length === 0) {
      await bot.sendMessage(chatId, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø.", {
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }]],
        },
      })
      return
    }

    let message = "üìù *–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø:*\n\n"

    requests.forEach((request, index) => {
      message += `${index + 1}. *${request.group_name}*\n`
      message += `üìÑ ${request.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n`
      message += `üë§ –û—Ç: ${request.User.first_name}`
      if (request.User.username) {
        message += ` (@${request.User.username})`
      }
      message += `\nüìÖ ${request.createdAt.toLocaleDateString("ru-RU")}\n\n`
    })

    const keyboard = {
      inline_keyboard: [
        ...requests.slice(0, 5).map((request) => [
          { text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å "${request.group_name}"`, callback_data: `approve_group_${request.id}` },
          { text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å "${request.group_name}"`, callback_data: `reject_group_${request.id}` },
        ]),
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_admin" }],
      ],
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showGroupRequests:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.")
  }
}

async function handleGroupRequestAction(bot, chatId, user, data) {
  try {
    const parts = data.split("_")
    const action = parts[0]
    const requestId = parts[2]

    const request = await GroupRequest.findByPk(requestId, {
      include: [{ model: User, attributes: ["first_name", "telegram_id"] }],
    })

    if (!request) {
      await bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    if (action === "approve") {
      const group = await Group.create({
        name: request.group_name,
        description: request.description,
        created_by: request.user_id,
        status: "active",
      })

      await UserGroup.create({
        user_id: request.user_id,
        group_id: group.id,
        role: "curator",
      })

      await request.update({ status: "approved" })

      await bot.sendMessage(chatId, `‚úÖ –ì—Ä—É–ø–ø–∞ "${request.group_name}" –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞!`)

      try {
        await bot.sendMessage(
          request.User.telegram_id,
          `üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${request.group_name}" –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ.`,
        )
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      }
    } else if (action === "reject") {
      await request.update({ status: "rejected" })

      await bot.sendMessage(chatId, `‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É "${request.group_name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)

      try {
        await bot.sendMessage(
          request.User.telegram_id,
          `üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${request.group_name}" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
        )
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      }
    }

    setTimeout(() => showGroupRequests(bot, chatId), 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleGroupRequestAction:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
  }
}

async function handleBackToGroups(bot, chatId, user) {
  try {
    const keyboard = await getGroupSelectionKeyboard(user.id)
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", {
      reply_markup: keyboard,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥—Ä—É–ø–ø–∞–º:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
  }
}

async function handleJoinGroup(bot, chatId, user, data) {
  const groupId = data.split("_")[2]

  try {
    const group = await Group.findByPk(groupId)
    if (!group) {
      await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
      return
    }

    const existingMembership = await UserGroup.findOne({
      where: { user_id: user.id, group_id: groupId },
    })

    if (existingMembership) {
      await bot.sendMessage(chatId, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
      return
    }

    await UserGroup.create({
      user_id: user.id,
      group_id: groupId,
      role: "member",
    })

    await bot.sendMessage(chatId, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ "${group.name}"!`)

    setTimeout(async () => {
      const keyboard = await getGroupMenuKeyboard(groupId, "member")
      await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É "${group.name}"!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: keyboard,
      })
    }, 1000)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ:", error)
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ.")
  }
}

async function handleAddGroup(bot, chatId, user) {
  setUserState(user.telegram_id, {
    action: "adding_group",
    step: "name",
  })

  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:\n\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å", {
    reply_markup: { force_reply: true },
  })
}

async function showAdminPanel(bot, chatId, user) {
  const adminKeyboard = {
    inline_keyboard: [
      [{ text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data: "admin_roles" }],
      [{ text: "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã", callback_data: "admin_group_requests" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_groups" }],
    ],
  }

  await bot.sendMessage(chatId, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", {
    reply_markup: adminKeyboard,
  })
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (handleSubjectManagement, handleDeleteSubject, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

module.exports = { setupCallbacks }

// Declare the handleSubjectManagement function
async function handleSubjectManagement(bot, chatId, user, groupId) {
  // Implementation of handleSubjectManagement goes here
}
