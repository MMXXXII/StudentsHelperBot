const cron = require("node-cron")
const { Task, User, UserGroup, Subject } = require("../database/models")
const { Op } = require("sequelize")

function startNotificationScheduler(bot) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
  cron.schedule("0 9 * * *", async () => {
    await sendDeadlineNotifications(bot)
  })

  console.log("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
}

async function sendDeadlineNotifications(bot) {
  try {
    const now = new Date()
    const weekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
    const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    const weekTasks = await Task.findAll({
      where: {
        deadline: {
          [Op.between]: [now, weekFromNow],
        },
        status: "active",
      },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
    })

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è –∏–ª–∏ –º–µ–Ω—å—à–µ
    const urgentTasks = await Task.findAll({
      where: {
        deadline: {
          [Op.between]: [now, threeDaysFromNow],
        },
        status: "active",
      },
      include: [
        { model: Subject, attributes: ["name"] },
        { model: User, as: "Creator", attributes: ["first_name"] },
      ],
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await sendTaskNotifications(bot, weekTasks, "week")
    await sendTaskNotifications(bot, urgentTasks, "urgent")
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error)
  }
}

async function sendTaskNotifications(bot, tasks, type) {
  for (const task of tasks) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      let users = []

      if (task.for_group) {
        // –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
        const userGroups = await UserGroup.findAll({
          where: { group_id: task.group_id },
          include: [{ model: User, where: { notifications_enabled: true } }],
        })
        users = userGroups.map((ug) => ug.User)
      } else {
        // –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
        const user = await User.findByPk(task.created_by)
        if (user && user.notifications_enabled) {
          users = [user]
        }
      }

      const deadline = new Date(task.deadline)
      const daysLeft = Math.ceil((deadline - new Date()) / (1000 * 60 * 60 * 24))

      const emoji = type === "urgent" ? "üî¥" : "üü°"
      const urgencyText = type === "urgent" ? "–°–†–û–ß–ù–û!" : "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

      const message =
        `${emoji} ${urgencyText}\n\n` +
        `üìã –ó–∞–¥–∞—á–∞: ${task.title}\n` +
        `üìö –ü—Ä–µ–¥–º–µ—Ç: ${task.Subject.name}\n` +
        `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n` +
        `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} –¥–Ω.\n\n` +
        `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è! üí™`

      for (const user of users) {
        try {
          await bot.sendMessage(user.telegram_id, message)
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error)
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏:", error)
    }
  }
}

module.exports = {
  startNotificationScheduler,
  sendDeadlineNotifications,
}
